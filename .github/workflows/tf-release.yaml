# Terraform Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'README.md'

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'terraform'
    steps:
      - name: "Setup - Checkout"
        uses: actions/checkout@v2.1.0

      # - name: "Setup - Build AWS Credentials"
      #   run: |
      #     mkdir -p ~/.aws
      #     echo "[default]" > ~/.aws/credentials
      #     echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
      #     echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # Marketplace: https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: "Setup - Terraform CLI"
        uses: hashicorp/setup-terraform@v1.3.2

      - name: "Run - Terraform Init"
        run: terraform init -input=false

      - name: "Run - Terraform Apply"
        id: apply
        run: terraform apply -auto-approve
  
  sls-deploy:
    name: "Serverless Deploy"
    runs-on: ubuntu-latest
    steps:
      - name: "Setup - Checkout"
        uses: actions/checkout@v2.1.0
      
      - name: Serverless Deploy
        uses: serverless/github-action@v3
        with:
          args: -c "cd ./ffl && serverless deploy"
          entrypoint: /bin/sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    needs: terraform-apply
